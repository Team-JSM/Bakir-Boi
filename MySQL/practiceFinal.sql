--
DECLARE
TYPE salary  IS TABLE OF NUMBER 
INDEX BY VARCHAR2(10)

salary_list salary;
name VARCHAR(20);
BEGIN   
salary_list('JISAN'):=100;
salary_list('SADMAN'):=200;

name:=salary_list.FIRST;
WHILE name is NOT null loop
dbms_output.put_line('Salary of'||name||TO_CHAR(salary_list.(name)));
name:=salary_list.NEXT(name);
END loop;
END;

/

---Varray
DECLARE
TYPE varray_list is VARRAY(2)
OF VARCHAR(2)

first varray_list('jisan', 'anam');
second varray_list('sadman');
cnt number:=0;
cnt :=first.COUNT;

for i in 1..cnt 



---WILL BE BETTER IF WE CHECK THE VARRAY BOOKS 

CREATE FUNCTION ID_GENERATION(ACC_TYPE IN VARCHAR,BRANCH_CODE IN INT,CUSTOMER_ID IN INT)

RETURN VARCHAR;

IS

GENERATEDID VARCHAR;

BEGIN



Example- 
CREATE OR REPLACE FUNCTION GEN_prescription_ID
RETURN VARCHAR2
IS

G_ID VARCHAR2(15);
ID VARCHAR2(15);
ID_VALUE NUMBER;

BEGIN

SELECT MAX(PID) INTO G_ID FROM prescription;

IF G_ID IS NULL --- Does not exist
THEN
    ID := '101' ;

ELSE
select max(substr(PID,-3)) into ID_VALUE from prescription;
    ID_VALUE := ID_VALUE + 1;
	id := to_char(ID_VALUE);

END IF;

RETURN NVL(('P' || ID),-1);

END;
/




delimiter |
CREATE  TRIGGER COMPLETE_TABLE BEFORE INSERT ON NEW_PRODUCT_COUNT

FOR EACH ROW 
BEGIN
DECLARE NUM INT;
DECLARE UNIQUE_ID VARCHAR(20);
SET NUM = NEW.AMOUNT;

NEWLOOP: LOOP
	SET UNIQUE_ID=CONCAT(NUM, NEW.COMPANY_NAME);

	INSERT INTO product_table SET ID=UNIQUE_ID , PRODUCT_NAME=NEW.COMPANY_NAME;
    /* SETID(NUM,UNIQUE_ID);*/

    SET NUM=NUM-1;

    IF(NUM=0) THEN leave NEWLOOP;
    end if;
    END LOOP NEWLOOP;
END;
|
delimiter ;



----------


Roll UP
SELECT LOCATION ,TIME ,ITEM SUM(SALARY) FROM SALES GROUP BY  ROLLUP(LOCATION,TIME,ITEM) ;

Drill Down
SELECT LOCATION ,TIME ,ITEM SUM(SALARY) FROM SALES GROUP BY ROLLDOWN(LOCATION,TIME,ITEM);

Slicing
SELECT LOCATION  SUM(REVENUE) FROM SALES WHERE LOCATION='DHAKA' GROUP BY LOCATION;

Dicing

SELECT LOCATION  SUM(REVENUE) FROM SALES WHERE LOCATION='DHAKA' AND ITEMS ='CRICKET_BAT' GROUP BY LOCATION;


---TABLESPACE
CREATE TABLE MYSPACE1
DATAFILE "D:\\MYSPACE1.DBF" SIZE 2M
EXTENT MANAGEMENT LOCAL AUTOALLOCATE; 

CREATE TABLE(){
    ID INT
    --
}TABLESPACE MYSPACE1;

--- JOINING SHOULD BE PRACTICED


SELECT  CUSTOMERS.CUSTOMERID ,ORDERS.ORDERID
FROM CUSTOMERS LEFT JOIN ORDERS ON CUSTOMERS.CUSTOMERID
=ORDERS.ORDERID;

SELECT ORDERS.ORDERID,EMPLOYEE.EMPLOYEEID
FROM ORDERS RIGHT JOIN EMPLOYEE ON ORDERS.ORDERID=EMPLOYEE.EMPLOYEEID



CREATE FUNCTION GET_STATUS(ID INT IN)
    RETURN VARCHAR(20);
    IS

    AMOUNT INT;
    MAJOR INT:=0;
    MINOR INT:=0;
    SHOW_STATUS VARCHAR(20);
    AMOUNT :=0;
    BEGIN
    SELECT CURRENT_BALANCE INTO AMOUNT FROM ACCOUNTS 
    WHERE ACCOUNT_ID=ID;

    SELECT SUM(CID) FROM DEFAULTERS INTO MAJOR 
    WHERE TP='MAJOR';

    SELECT SUM(CID) FORM DEFAULTERS INTO MINOR
    WHERE TP='MINOR';

    IF(CURRENT_BALANCE>2000000 AND MAJOR<0 AND MINOR <0)
       SHOW_STATUS:='VIP';

    ELIF(CURRENT_BALANCE>400000 AND CURRENT_BALANCE<200000 AND MAJOR<0 AND MINOR<0)
       SHOW_STATUS:='IMPORTANT';
    
    ELSE
        SHOW_STATUS:=ORDINARY;

    END IF;

    RETURN SHOW_STATUS;

    END;
    /

    CREATE PROCEDURE UPDATE_ID(CUSTOMER_ID INT IN)
    IS 
    UPDATE_BALANCE INT ;
    DATE_DIFFERENCE INT;

    BEGIN

    SELECT (LASTDATE-SYSDATE) INTO DATE_DIFFERENCE FROM 
    CUSTOMER WHERE ID=CUSTOMER_ID;

    IF(TRAUNC(DATE_DIFFERENCE/30)>3)
        UPDATE CUSTOMER SET(IRATE=2) WHERE ID=CUSTOMER_ID;
    ELSE
        UPDATE CUSTOMER SET(IRATE=1) WHERE ID=CUSTOMER_ID;

    


    CREATE FUNCTION CALCULATE_PROFIT(ID INT IN)
    RETURN INT ;
    IS
    PROFIT INT;
    BEGIN


    CREATE PROCEDURE UPDATEACC
    IS

    PROFIT INT;
    CURSOR C IS
    SELECT * FROM CUTOMER;
    BEGIN
    OPEN C;
    FOR RECORD IN C
    LOOP
    SELECT PROFIT INTO PROFIT FROM ACCOUNT WHERE 
    ID=RECORD.ID;

    UPDATE CUTOMER SET BALANCE =BALANCE+PROFIT WHERE 
    ID=RECORD.ID;

    END LOOP;

    END;
/


CREATE FUNCTION AUTOMATE(TYPE INT IN,BRANCH VARCHAR(20),ID INT)
RETURN VARCHAR;
IS
BIRTHDATE DATE;
IDNEW VARCHAR;
TT INT;
BEGIN
IF(TYPE='SAVING') THEN 
TT :=10;
ELIF(TYPE='CURRENT') THEN
TT :=11;



SELECT BIRTHDATE INTO BIRTHDATE FROM ACCOUNTS WHERE ID=ID;
IDNEW:=CONCAT(CONCAT(CONCAT(CONCAT(TT,BRANCH),BIRTHDATE),'.'),ID);

RETURN IDNEW;


CREATE TRIGGER AUTO_GENERATE BEFORE INSERT ON ACCOUNT

DECLARE


UPDATE NATIONAL_ID SET FATHER'S_NAME = (SELECT NAME FROM NATIONAL_ID WHERE NID=FATHER'S_ID) WHERE NID=NID;

















